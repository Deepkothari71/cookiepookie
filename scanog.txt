'use client'

import { useState } from 'react'
import { Search, CheckCircle, XCircle } from 'lucide-react'
import PageLayout from '../page-layout'

export default function ScanPage() {
  const [url, setUrl] = useState('')
  const [isScanning, setIsScanning] = useState(false)
  const [scanResult, setScanResult] = useState(null)

  // Mock scan function - connect to your backend in production
  const scanUrl = async (urlToScan) => {
    setIsScanning(true)
    
    // Simulate API call to your backend
    try {
      // Replace this with your actual backend API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Simulate a response (replace with your actual backend response)
      setScanResult({
        url: urlToScan,
        compliant: Math.random() > 0.5,
        issues: Math.random() > 0.5 ? ["Missing opt-out option", "Auto-accepting all cookies"] : [],
        scanDate: new Date().toISOString()
      })
    } catch (error) {
      console.error("Scan failed:", error)
      setScanResult({ error: "Failed to scan URL. Please try again." })
    } finally {
      setIsScanning(false)
    }
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (url.trim()) {
      scanUrl(url)
    }
  }

  return (
    <PageLayout>
      <div className="max-w-3xl mx-auto mt-8">
        <h1 className="text-3xl font-bold mb-8 text-center">Scan Website for Cookie Compliance</h1>
        
        <form onSubmit={handleSubmit} className="mb-8">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <input
                type="url"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="Enter website URL (e.g., https://example.com)"
                className="w-full px-4 py-3 rounded-lg bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-blue-500 text-white"
                required
              />
            </div>
            <button
              type="submit"
              disabled={isScanning}
              className={px-6 py-3 rounded-lg font-medium flex items-center justify-center gap-2 ${
                isScanning 
                  ? 'bg-slate-600 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700 transition-colors'
              }}
            >
              {isScanning ? 'Scanning...' : (
                <>
                  <Search size={18} />
                  Scan Now
                </>
              )}
            </button>
          </div>
        </form>

        {isScanning && (
          <div className="text-center py-12">
            <div className="animate-pulse flex flex-col items-center">
              <div className="w-16 h-16 border-4 border-blue-400 border-t-transparent rounded-full animate-spin mb-4"></div>
              <p className="text-xl">Scanning {url}...</p>
              <p className="text-slate-400 mt-2">This may take a few moments</p>
            </div>
          </div>
        )}

        {!isScanning && scanResult && !scanResult.error && (
          <div className="bg-slate-800 border border-slate-700 rounded-xl overflow-hidden shadow-lg">
            <div className="p-6">
              <div className="flex items-start justify-between">
                <div>
                  <h2 className="text-xl font-bold mb-1">Scan Results</h2>
                  <p className="text-slate-400 text-sm">
                    {new Date(scanResult.scanDate).toLocaleString()}
                  </p>
                </div>
                <div className={flex items-center ${scanResult.compliant ? 'text-green-400' : 'text-red-400'}}>
                  {scanResult.compliant ? <CheckCircle size={24} /> : <XCircle size={24} />}
                  <span className="ml-2 font-medium">
                    {scanResult.compliant ? 'Compliant' : 'Non-compliant'}
                  </span>
                </div>
              </div>
              
              <div className="mt-6">
                <div className="flex items-center mb-2">
                  <span className="font-medium w-24">URL:</span>
                  <a 
                    href={scanResult.url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-blue-400 hover:underline truncate"
                  >
                    {scanResult.url}
                  </a>
                </div>
                
                {scanResult.issues.length > 0 && (
                  <div className="mt-4">
                    <h3 className="font-medium mb-2">Issues Found:</h3>
                    <ul className="list-disc pl-5 space-y-1 text-red-300">
                      {scanResult.issues.map((issue, index) => (
                        <li key={index}>{issue}</li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {scanResult.issues.length === 0 && scanResult.compliant && (
                  <div className="mt-4 text-green-300">
                    No compliance issues detected.
                  </div>
                )}
              </div>
            </div>
            
            <div className="px-6 py-4 bg-slate-900 border-t border-slate-700">
              <button 
                onClick={() => {setUrl(''); setScanResult(null);}}
                className="text-blue-400 hover:text-blue-300 font-medium"
              >
                Scan another URL
              </button>
            </div>
          </div>
        )}

        {!isScanning && scanResult && scanResult.error && (
          <div className="bg-red-900/30 border border-red-800 rounded-lg p-6 text-center">
            <XCircle size={32} className="mx-auto mb-2 text-red-400" />
            <h3 className="text-xl font-medium text-red-300 mb-2">Scan Failed</h3>
            <p>{scanResult.error}</p>
          </div>
        )}
      </div>
    </PageLayout>
  )
}